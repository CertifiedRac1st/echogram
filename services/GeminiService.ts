
import { GoogleGenAI, GenerateContentResponse } from "@google/genai";

let geminiClient: GoogleGenAI | null = null;

// New function to initialize client with user-provided key
export async function initializeUserProvidedClient(userApiKey: string): Promise<void> {
  if (!userApiKey || userApiKey.trim() === "") {
    geminiClient = null; // Ensure client is reset if key is empty
    throw new Error("API Key cannot be empty.");
  }
  try {
    // Forcing a re-creation of the client if one already exists with a different key or state.
    geminiClient = new GoogleGenAI({ apiKey: userApiKey });
    // A small, quick, and low-cost call to validate the key and connectivity.
    // Using generateContent with a very short prompt as a "ping".
    // This helps confirm the key is functional before proceeding.
    const testPrompt = "Hi";
    await geminiClient.models.generateContent({
        model: 'gemini-2.5-flash-preview-04-17', // Use a fast model
        contents: testPrompt,
        config: { thinkingConfig: { thinkingBudget: 0 } } // Disable thinking for speed
    });
    // If the above call doesn't throw, the key is considered valid.
  } catch (error) {
    geminiClient = null; // Reset client on failure
    console.error("Failed to initialize or validate GoogleGenAI client with user key:", error);
    if (error instanceof Error && (error.message.includes("API key not valid") || error.message.includes("permission"))) {
        throw new Error(`API key is not valid. Please check your key. Original error: ${error.message}`);
    }
    throw new Error(`Failed to initialize Gemini client: ${error instanceof Error ? error.message : String(error)}`);
  }
}

export function isClientInitialized(): boolean {
  return geminiClient !== null;
}

function getInitializedClient(): GoogleGenAI {
  if (!geminiClient) {
    throw new Error("Gemini client is not initialized. Please set your API key via the application interface.");
  }
  return geminiClient;
}

export const fileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const result = reader.result as string;
      resolve(result.split(',')[1]);
    };
    reader.onerror = error => reject(error);
  });
};

export async function generateImageWithPromptFromImage(
  base64Image: string,
  mimeType: string
): Promise<{ imageUrl: string; finalPrompt: string }> {
  const ai = getInitializedClient(); 

  const imagePart = {
    inlineData: {
      mimeType: mimeType,
      data: base64Image,
    },
  };
  const textPart = {
    text: "Analyze this image. Provide a detailed, concise description suitable for an image generation model to recreate a similar image. Focus on the main subject, its attributes, style, colors, and overall composition. Output only the descriptive prompt.",
  };

  let basePrompt = "A detailed image of the subject";
  try {
    const descriptionResponse: GenerateContentResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash-preview-04-17', 
      contents: { parts: [imagePart, textPart] },
      config: { thinkingConfig: { thinkingBudget: 0 } } // Disable thinking for faster description
    });
    
    const candidateText = descriptionResponse.text;
    if (candidateText && candidateText.trim() !== "") {
        basePrompt = candidateText.trim();
    } else {
        console.warn("Gemini description was empty, using fallback prompt.");
    }

  } catch (error) {
    console.error("Error generating image description with Gemini:", error);
    throw new Error(`Failed to generate image description: ${error instanceof Error ? error.message : String(error)}`);
  }
  
  const finalPrompt = `${basePrompt}, with a clear or transparent background, high resolution, photorealistic style, centered subject.`;

  try {
    const imageGenerationResponse = await ai.models.generateImages({
        model: 'imagen-3.0-generate-002',
        prompt: finalPrompt,
        config: { numberOfImages: 1, outputMimeType: 'image/png' },
    });

    if (imageGenerationResponse.generatedImages && imageGenerationResponse.generatedImages.length > 0 && imageGenerationResponse.generatedImages[0].image.imageBytes) {
      const generatedBase64Image = imageGenerationResponse.generatedImages[0].image.imageBytes;
      return {
        imageUrl: `data:image/png;base64,${generatedBase64Image}`,
        finalPrompt: finalPrompt,
      };
    } else {
      console.error("Image generation API did not return an image:", imageGenerationResponse);
      throw new Error("No image was generated by the API, or the response was malformed.");
    }
  } catch (error) {
     console.error("Error generating image with Gemini Imagen:", error);
     throw new Error(`Failed to generate new image: ${error instanceof Error ? error.message : String(error)}`);
  }
}
